AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  go-csv-txt-xsl

Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessForAppsyncResolvers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartSyncExecution #Type: Express
                Resource:
                  - !Ref StoreProcessGetURLStateMachine
                  # - !Ref ValidateCellStateMachine
                  - !Ref ValidationsStateMachine
                  - !Ref ValidationFirstRegistryStateMachine
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt DBProcesses.Arn
                  - !Sub 
                    - "${Table}/index/*"
                    - { Table: !GetAtt DBProcesses.Arn }
                  - !GetAtt DBConfigurador.Arn
                  - !Sub 
                    - "${Table}/index/*"
                    - { Table: !GetAtt DBConfigurador.Arn }
              - Effect: Allow
                Action:
                - lambda:invokeFunction
                Resource: 
                  - !GetAtt SaveStructureFunction.Arn
                  - !GetAtt ReadFilenameFunction.Arn

  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: "The GraphQL API for the single table App"
    Properties:
      Name: AppSyncTestAPI
      AuthenticationType: API_KEY

  # API Key for external access
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId

  # AppSync Schema
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "./schema.graphql"

  
 ###############      
 ## DATA SOURCE ##
 ###############  

  # AppSync Data Source for DynamoDB - DBProcesses
  DBProcessesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: DBProcesses
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "The Single Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DBProcesses
        AwsRegion: !Sub ${AWS::Region}

   # AppSync Data Source for StepFunction
  StepFunctionsHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: StepFunctionsHttpDataSource
      Description: Step Functions HTTP
      Type: HTTP
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      HttpConfig:
        Endpoint: !Sub https://sync-states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: states

  SaveStructureDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: SaveStructure
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt SaveStructureFunction.Arn
  
 ###############      
 ## RESOLVERS ##
 ###############  

  # OKAY: true
  ListProcessesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: listProcesses
      DataSourceName: !GetAtt DBProcessesDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "Query",
          "index": "list-processes",
          "query": {
            "expression": "sk = :sk",
            "expressionValues":	{              
        	    ":sk" : $util.dynamodb.toDynamoDBJson("PROCESO")
            }
          },
          #if( $context.args.nextToken ) "nextToken": "$context.args.nextToken", #end
          #if( $context.args.limit ) "limit" : $context.args.limit #else "limit": 10  #end
        }
      ResponseMappingTemplate: > # falta llenar con la lectura ()
        {
          "processes": [
            #foreach($item in $ctx.result.items) {
              "idProcess": $util.toJson($item['idProcess']),
              "Ttransaction": $util.toJson($item['Ttransaction']),
              "contractor": $util.toJson($item['contractor']),
              "policy": $util.toJson($item['policy']),
              "product": $util.toJson($item['product']),
              "salesChannel": $util.toJson($item['salesChannel']),
              "currency": $util.toJson($item['currency']),
              "premium": $util.toJson($item['premium']),
              "asegurados": $util.toJson($item['asegurados']),
              "declarationPeriod": $util.toJson($item['declarationPeriod']),
              "creationDate": $util.toJson($item['creationDate']),
              "faseActual": $util.toJson($item['faseActual'])
            }
            #if($foreach.hasNext),#end
            #end
          ],
          "nextToken": $util.toJson($ctx.result.nextToken)
        }

  # OKAY: true
  StoreProcessGetURLResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: storeProcessGetURL
      DataSourceName: !GetAtt StepFunctionsHttpDataSource.Name
      RequestMappingTemplate: !Sub >
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/",
          "params": {
            "headers": {
              "content-type": "application/x-amz-json-1.0",
              "x-amz-target":"AWSStepFunctions.StartSyncExecution"
            },
            "body": {
              "stateMachineArn": "${StoreProcessGetURLStateMachine}",
              "input": "{ \"input\": $util.escapeJavaScript($util.toJson($ctx.args.input)), \"filename\": $util.escapeJavaScript($util.toJson($ctx.args.filename))}"
            }
          }
        }
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output

  SaveStructureResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: saveStructure
      DataSourceName: !GetAtt SaveStructureDataSource.Name
      RequestMappingTemplate: !Sub >
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "event": $utils.toJson($context.args.event)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

 ###################      
 ## STATEMACHINES ##
 ###################
  ValidationFirstRegistryStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/validation_first_registry.asl.json
      Type: EXPRESS
      Name: validation_first_registry
      DefinitionSubstitutions:
        ValidationFunctionArn: !GetAtt ValidationFunction.Arn
        ValidationFirstRegistryFunctionArn: !GetAtt ValidationFirstRegistryFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ValidationFirstRegistryLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidationFirstRegistryFunction
        - CloudWatchLogsFullAccess
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 

  StoreProcessGetURLStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/store_process_get_url.asl.json
      Type: EXPRESS
      Name: store_process_get_url
      DefinitionSubstitutions: 
        DDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        TABLE_NAME_TRAMAS: !Ref DBProcesses
        GetURLFunctionArn: !GetAtt GetURLFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StoreProcessGetURLLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GetURLFunction
        - DynamoDBCrudPolicy:
            TableName: !Ref DBProcesses
        - CloudWatchLogsFullAccess

  ValidationsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/validations.asl.json
      Type: EXPRESS
      Name: validation
      DefinitionSubstitutions:
        ValidationFunctionArn: !GetAtt ValidationFunction.Arn
        TransformXSLFunctionArn: !GetAtt TransformXSLFunction.Arn
        TransformXSLArrayRegistriesFunctionArn: !GetAtt TransformXSLArrayRegistriesFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ValidationsLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TransformXSLFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TransformXSLArrayRegistriesFunction
        - CloudWatchLogsFullAccess
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 

  ValidationFirstRegistryStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/validation_first_registry.asl.json
      Type: EXPRESS
      Name: validation_first_registry
      DefinitionSubstitutions:
        GagaFunctionArn: !GetAtt GagaFunction.Arn
        ValidationFirstRegistryFunctionArn: !GetAtt ValidationFirstRegistryFunction.Arn
        ReadFilenameFunctionArn: !GetAtt ReadFilenameFunction.Arn
        DDBQuery: arn:aws:states:::aws-sdk:dynamodb:query
        TABLE_NAME_CONFIGURADOR: !Ref DBConfigurador
        TABLE_NAME_PROCESSES: !Ref DBProcesses

      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ValidationFirstRegistryLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador
        - DynamoDBCrudPolicy:
            TableName: !Ref DBProcesses
        - LambdaInvokePolicy:
            FunctionName: !Ref GagaFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidationFirstRegistryFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ReadFilenameFunction
        - CloudWatchLogsFullAccess
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 

 ###############      
 ## LOGS      ##
 ###############  

  ValidationFirstRegistryLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/validation-first-registry
      RetentionInDays: 3

  ValidationsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/validation
      RetentionInDays: 3
      
  TransformCSV:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/transform-csv
      RetentionInDays: 3

  TransformXSL:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/transform-xsl
      RetentionInDays: 3
  
  StoreProcessGetURLLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/store-process-get-url
      RetentionInDays: 3


 ###############      
 ## DynamoDB  ##
 ############### 

  DBProcesses:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DBProcesses
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: policy
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: list-processes
        KeySchema:
          - AttributeName: sk
            KeyType: HASH
          - AttributeName: pk
            KeyType: RANGE
        Projection:
          ProjectionType: ALL ##CAMBIARRR
      - IndexName: sk-policy
        KeySchema:
          - AttributeName: sk
            KeyType: HASH
          - AttributeName: policy
            KeyType: RANGE
        Projection:
          ProjectionType: ALL ##CAMBIARRR

  DBConfigurador:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DBConfigurador
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: nPoliza
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: pk-nPoliza
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: nPoliza
            KeyType: RANGE
        Projection:
          ProjectionType: ALL ##CAMBIARRR


 ###############      
 ## Functions ##
 ###############  

  # # SplitChunksCSV
  # SplitChunksCSVFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ./functions/split-chunks-csv
  #     Handler: handler
  #     Runtime: go1.x
  #     MemorySize: 2048 
  #     Timeout: 300
  #     Environment:
  #       Variables:
  #         BUCKET_NAME: !Ref DataBucket
  #         TABLA_NAME_TRAMAS: !Ref DBProcesses
  #         TABLA_NAME_CONFIGURADOR: !Ref DBConfigurador
  #         REGION: !Sub ${AWS::Region}
  #     Policies: 
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref DBProcesses
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref DBConfigurador
  #       - AWSLambdaBasicExecutionRole
  #       - S3ReadPolicy:
  #           BucketName: !Ref DataBucket
  #     Events:
  #       EBRule:
  #         Type: EventBridgeRule
  #         Properties:
  #           InputPath: "$.detail"
  #           Pattern:
  #             detail:
  #               bucket:
  #                 name:
  #                   - !Ref DataBucket                
  #             detail-type:
  #               - "Object Created"
  #             source:
  #               - aws.s3 

  # GUARDAR CONFIGURACION
  SaveStructureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/configurador/put
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          TableName: !Ref DBConfigurador
          Region: !Sub ${AWS::Region}
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador


  # Validacion
  ValidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/validations
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          Region: !Sub ${AWS::Region}
      Policies:
        - AWSLambdaBasicExecutionRole


  TransformCSVFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transform-csv
      Handler: test-transform-csv
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          TABLA_NAME_TRAMAS: !Ref DBProcesses
          TABLA_NAME_CONFIGURADOR: !Ref DBConfigurador
          REGION: !Sub ${AWS::Region}
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DBProcesses
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      # Events:
      #   EBRule:
      #     Type: EventBridgeRule
      #     Properties:
      #       InputPath: "$.detail"
      #       Pattern:
      #         detail:
      #           bucket:
      #             name:
      #               - !Ref DataBucket                
      #         detail-type:
      #           - "Object Created"
      #         source:
      #           - aws.s3 

  TransformXSLFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transform-xsl
      Handler: test-transform-xsl
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          TABLA_NAME_TRAMAS: !Ref DBProcesses
          TABLA_NAME_CONFIGURADOR: !Ref DBConfigurador
          REGION: !Sub ${AWS::Region}
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DBProcesses
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      # Events:
      #   EBRule:
      #     Type: EventBridgeRule
      #     Properties:
      #       InputPath: "$.detail"
      #       Pattern:
      #         detail:
      #           bucket:
      #             name:
      #               - !Ref DataBucket                
      #         detail-type:
      #           - "Object Created"
      #         source:
      #           - aws.s3
 
  TransformXSLArrayRegistriesFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transform-xsl-array-registries
      Handler: test-transform-xsl
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          TABLA_NAME_TRAMAS: !Ref DBProcesses
          TABLA_NAME_CONFIGURADOR: !Ref DBConfigurador
          REGION: !Sub ${AWS::Region}
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DBProcesses
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 

  ValidationFirstRegistryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/validation-first-registry
      Handler: validation-first-registry
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          TABLA_NAME_TRAMAS: !Ref DBProcesses
          TABLA_NAME_CONFIGURADOR: !Ref DBConfigurador
          REGION: !Sub ${AWS::Region}
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DBProcesses
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket

  GagaFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/gaga
      Handler: test-gaga
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          REGION: !Sub ${AWS::Region}
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 

  ReadFilenameFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/read-filename
      Handler: read-filename
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          REGION: !Sub ${AWS::Region}
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket

  GetURLFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-url
      Handler: get-url
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          REGION: !Sub ${AWS::Region}
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref DataBucket


 #############################
 ## BUCKET                ####
 #############################
  DataBucket:
    Type: AWS::S3::Bucket 
    Properties:  
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: True 
      CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
              MaxAge: 3000 



Outputs:
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncApiKey.ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId         
