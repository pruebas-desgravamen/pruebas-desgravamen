AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  go-csv-txt-xsl

Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessForAppsyncResolvers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartSyncExecution #Type: Express
                Resource:
                  - !Ref UploadFileStateMachine
                  # - !Ref ValidateCellStateMachine
                  - !Ref ValidationsStateMachine
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt DB.Arn
                  - !Sub 
                    - "${Table}/index/*"
                    - { Table: !GetAtt DB.Arn }
              - Effect: Allow
                Action:
                - lambda:invokeFunction
                Resource: 
                  - !GetAtt FirstServCargaFunction.Arn

  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: "The GraphQL API for the single table App"
    Properties:
      Name: AppSyncTestAPI
      AuthenticationType: API_KEY

  # API Key for external access
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId

  # AppSync Schema
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "./schema.graphql"

  # AppSync Data Source for DynamoDB
  AppSyncTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: Tramas
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "The Single Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DB
        AwsRegion: !Sub ${AWS::Region}

   # AppSync Data Source for StepFunction
  StepFunctionsHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: StepFunctionsHttpDataSource
      Description: Step Functions HTTP
      Type: HTTP
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      HttpConfig:
        Endpoint: !Sub https://sync-states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: states
 ###############      
 ## DATA SOURCE ##
 ###############  

  # FirstServCargaDataSource: 
  #   Type: "AWS::AppSync::DataSource"
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     Name: FirstServCargaDataSource
  #     Type: AWS_LAMBDA
  #     ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  #     LambdaConfig:
  #       LambdaFunctionArn: !GetAtt FirstServCargaFunction.Arn

  # InDataSource: 
  #   Type: "AWS::AppSync::DataSource"
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     Name: InDataSource
  #     Type: AWS_LAMBDA
  #     ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  #     LambdaConfig:
  #       LambdaFunctionArn: !GetAtt InFunction.Arn

 ###############      
 ## RESOLVERS ##
 ###############  

  #  # Resolver: Mutation - resendInvitation
  # FirstServCargaResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     TypeName: Mutation
  #     FieldName: firstServCarga
  #     DataSourceName: !GetAtt FirstServCargaDataSource.Name
  #     RequestMappingTemplate: !Sub >
  #       {
  #         "version": "2017-02-28",
  #         "operation": "Invoke",
  #         "payload": {
  #           "input": $utils.toJson($context.args.input)
  #         }
  #       }
  #     ResponseMappingTemplate: $util.toJson($context.result)

  ShowDashboardResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: showDashboard
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "pk = :pk",
            "expressionValues":	{              
        	    ":pk" : $util.dynamodb.toDynamoDBJson("TRAMA")
            }
          }
        }
      ResponseMappingTemplate: >
        {
          "cargas": [
            #foreach($item in $ctx.result.items) {
              "tipo": $util.toJson($item['tipo']),
              "poliza": $util.toJson($item['poliza']),                           
              "contratante": $util.toJson($item['contratante']),      
              "producto": $util.toJson($item['producto']),         
              "canalDeVenta": $util.toJson($item['canalDeVenta']),                           
              "transaccion": $util.toJson($item['transaccion']),                           
              "periodoDeclaracion": $util.toJson($item['periodoDeclaracion']),                           
              "ruc": $util.toJson($item['ruc']),                           
              "userCode": $util.toJson($item['userCode'])
            }
            #if($foreach.hasNext),#end
            #end
          ],
          "nextToken": $util.toJson($ctx.result.nextToken)
        }


  UploadFileResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: uploadFile
      DataSourceName: !GetAtt StepFunctionsHttpDataSource.Name
      RequestMappingTemplate: !Sub >
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/",
          "params": {
            "headers": {
              "content-type": "application/x-amz-json-1.0",
              "x-amz-target":"AWSStepFunctions.StartSyncExecution"
            },
            "body": {
              "stateMachineArn": "${UploadFileStateMachine}",
              "input": "{ \"input\": $util.escapeJavaScript($util.toJson($ctx.args.input)), \"filename\": $util.escapeJavaScript($util.toJson($ctx.args.filename))}"
            }
          }
        }
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output

 ###################      
 ## STATEMACHINES ##
 ###################
  UploadFileStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/upload_file.asl.json
      Type: EXPRESS
      Name: upload-file
      DefinitionSubstitutions:  
        TableName: !Ref DB
        FirstServCargaFunctionArn: !GetAtt FirstServCargaFunction.Arn
        InFunctionArn: !GetAtt InFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt UploadFileLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref FirstServCargaFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref InFunction
        - DynamoDBCrudPolicy:
            TableName: !Ref DB 
        - CloudWatchLogsFullAccess

  ValidationsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/validations.asl.json
      Type: EXPRESS
      Name: validation
      DefinitionSubstitutions:
        ValidationFunctionArn: !GetAtt ValidationFunction.Arn
        TransformXSLFunctionArn: !GetAtt TransformXSLFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ValidationsLogs.Arn
        IncludeExecutionData: true
        Level: ALL  
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TransformXSLFunction
        - CloudWatchLogsFullAccess
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 

 ###############      
 ## LOGS      ##
 ###############  

  ValidationsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/validation
      RetentionInDays: 3
      
  TransformCSV:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/transform-csv
      RetentionInDays: 3

  TransformXSL:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/transform-xsl
      RetentionInDays: 3
  
  UploadFileLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/upload-file
      RetentionInDays: 3


 ###############      
 ## DynamoDB  ##
 ############### 
  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tramas
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S        
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  DBTramas:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DBTramas
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  DBConfigurador:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DBConfigurador
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: nPoliza
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: pk-nPoliza
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: nPoliza
            KeyType: RANGE
        Projection:
          ProjectionType: ALL


 ###############      
 ## Functions ##
 ###############  

  # GUARDAR CONFIGURACION
  SaveStructure:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/configurador/put
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          TableName: !Ref DBConfigurador
          Region: !Sub ${AWS::Region}
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador


  # Validacion
  ValidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/validations
      Handler: handler
      Runtime: go1.x
      Environment:
        Variables:
          Region: !Sub ${AWS::Region}
      Policies:
        - AWSLambdaBasicExecutionRole


  TransformCSVFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transform-csv
      Handler: test-transform-csv
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          TABLA_NAME: !Ref DB
          REGION: !Sub ${AWS::Region}
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 

  TransformXSLFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transform-xsl
      Handler: test-transform-xsl
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          TABLA_NAME_TRAMAS: !Ref DBTramas
          TABLA_NAME_CONFIGURADOR: !Ref DBConfigurador
          REGION: !Sub ${AWS::Region}
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DBTramas
        - DynamoDBCrudPolicy:
            TableName: !Ref DBConfigurador
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      # Events:
      #   EBRule:
      #     Type: EventBridgeRule
      #     Properties:
      #       InputPath: "$.detail"
      #       Pattern:
      #         detail:
      #           bucket:
      #             name:
      #               - !Ref DataBucket                
      #         detail-type:
      #           - "Object Created"
      #         source:
      #           - aws.s3 

  GagaFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/gaga
      Handler: test-gaga
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          REGION: !Sub ${AWS::Region}
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                bucket:
                  name:
                    - !Ref DataBucket                
              detail-type:
                - "Object Created"
              source:
                - aws.s3 


  InFunction:         
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/in
      Handler: test-in
      Runtime: go1.x
      MemorySize: 2048 
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataBucket
          REGION: !Sub ${AWS::Region}
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref DataBucket

  FirstServCargaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/first-serv-carga
      Handler: test-first-serve-carga
      Runtime: go1.x
      MemorySize: 128    
      Timeout: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
      Environment:
        Variables:
          DB: !Ref DB


 #############################
 ## BUCKET                ####
 #############################
  DataBucket:
    Type: AWS::S3::Bucket 
    Properties:  
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: True 
      CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
              MaxAge: 3000 



Outputs:
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncApiKey.ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId         
