#-------------- CARGA MASIVA ----------------

enum Transaction {
  VENTA
  AFILIACIONES
  PAGOS
}

# save process
input InputCargaDashboard { #cambiar nombre
  # numero de poliza
  policy: String!
  # contratante
  contractor: String!
  # producto
  product: String!
  # canal de venta
  salesChannel: String!
  # transaccion
  transaction: Transaction!
  # periodo de declaracion
  declarationPeriod: String!
  # RUC
  ruc: String
  # id estructura
  structure: String!
}

# # query processes
type AllProcesses {  #Cambiar nombre    DYNAMO: RUC, FECHA DE FINALIZACION E INICIO DE PROCESO PARA CADA ESTADO, cantidad de registros
  idProcess: String! #id del proceso
  # transaccion
  transaction: Transaction!
  # contratante
  contractor: String!
  # numero de poliza
  policy: String!
  # producto   
  product: String! 
  # canalDeVenta
  salesChannel: String!
  # tipo de moneda (1 para soles, 2 para dolares)
  currency: Int!
  # monto de prima
  premium: Float!
  # Cantidad de asegurados
  asegurados: Int!
  # periodo de declaracion
  declarationPeriod: String!
  # fecha y hora de creacion
  creationDate: String!
  # fase actual
  faseActual: String! # fase o estado (trabajar con numeros)
  # objeto fase
  # fase: [Objeto Fase] # objeto fase: numero de fase, cantidad errores, cantidad analizada o exitosa, tiempo (preguntar Gustavox|) 
}


type AllProcessesOutput{
  processes:  [AllProcesses]
  nextToken: String
}


#-------------- CONFIGURACION ----------------
###################################################
#####################  INPUT  #####################
###################################################


input PolicyInput{
  product: String!
  nPolicy: String!
  contractor: String!
  salesChannel: String!
  startDate: String!
  expirDate: String!
  currency: String!
  ruc: String!
  functions: [Int]!
}

input AtributeInput{
  id: String
  attribute: String!
  dataType: String!
  required: String!
  uniqueValue: String!
  function: [String]!
  origin: [String]!
  argument: [String]!
  domain: [String]!
}

input EntityInput{
  entityId: String
  attribute: String!
  description: String!
  origin: String!
  value: String!
}


input StructureInput {
  #Datos Generales
  structureName: String!
  transaction: String!
  branch: String!
  header: String!
  certificateByRole: String!
  rowsOrderByRole: String!
  fileFormat: String!
  dateFormat: String!

  #Coleccion de policys
  policyCollection: [PolicyInput]

  #Lista de attributes
  attributes: [AtributeInput]

  #Registrar configuracion de entidades
  client: [EntityInput]!
  certificate: [EntityInput]!
  role: [EntityInput]!
  policy: [EntityInput]!
  credit: [EntityInput]!


  #Si es update
  structureId: Int
}

enum Operation{
  INSERT
  UPDATE
  DELETE
}

input UpdateObject{
  op: Operation
  dataObject: String

  structureName: String
  transaction: String
  branch: String
  header: String
  certificateByRole: String
  rowsOrderByRole: String
  fileFormat: String
  dateFormat: String

  policy: PolicyInput
  attributes: AtributeInput
  clientEntity: EntityInput
  certificateEntity: EntityInput
  roleEntity: EntityInput
  policyEntity: EntityInput
  creditEntity: EntityInput
}

input UpdateStructureInput{
  structureId: String!
  updateObject: [UpdateObject]!
}

###################################################
#####################RESPONSES#####################
###################################################

type Policy{
  product: String!
  nPolicy: String!
  contractor: String!
  salesChannel: String!
  startDate: String!
  expirDate: String!
  currency: String!
  ruc: String!
  functions: [Int]!
}

type Atribute{
  id: String!
  attribute: String!
  dataType: String!
  required: String!
  uniqueValue: String!
  function: [String]!
  origin: [String]!
  argument: [String]!
  domain: [String]!
}


type Entity{
  attribute: String!
  description: String!
  origin: String!
  value: String!
  equivalence:[String]!
}
## ["masculino:1","femenino:2"]

type Structure {
  #Datos Generales
  structureName: String!
  transaction: String!
  branch: String!
  header: String!
  certificateByRole: String!
  rowsOrderByRole: String!
  fileFormat: String!
  dateFormat: String!

  #Coleccion de policys
  policyCollection: [Policy]

  #Lista de attributes
  attributes: [Atribute]

  #Registrar configuracion de entidades
  client: [Entity]
  certificate: [Entity]
  role: [Entity]
  policy: [Entity]
  credit: [Entity]

}

type Mutation {

  #####################################################
  ####################ESTRUCTURAS######################
  #####################################################
  
  storeStructure(event: StructureInput!): Boolean #store
  # # validations(validations: InputValidations ): String
  # deleteStructure(structureId:String!):Boolean # falta eliminar una estructura
  activeStructure(structureId: Int, state:Boolean):Boolean # falta activar o desactivar una estructura
  # # cloneStructure(???): Boolean # falta clonar una estructura
  updateStructure(event: UpdateStructureInput!): Boolean # falta actualizar una estructura

  #####################################################
  ###################CARGA MASIVA######################
  #####################################################
  
  # DONE
  storeProcessGetURL(input: InputCargaDashboard, filename: String): String   #Devuelve URL

  
}

type GetStructurePolicyOutput{
  contractor: String
  product: String
  salesChannel: String
  structureName: String
}

type GetStructureRucOutput{
  contractor: String
  product: String
  salesChannel: String
  structureName: String
  nPolicy: [String]
}

type GetStructureContractorOutput{
  ruc: String
  product: String
  salesChannel: String
  structureName: String
  nPolicy: [String]
}


type Query{

  #####################################################
  ####################ESTRUCTURAS######################
  #####################################################
  getStructure(structureId:String!):Structure  # falta obtener una estructura
  # getAllStructures: [Structure]    # listar estructuras posiblemente?

  #####################################################
  ###################CARGA MASIVA######################
  #####################################################
  # getStructureCarga(xRuc:String, xPoliza: String, xContratante: String): contratnte profucto canal de venta   ruc  # falta crear, hablar con gustavo para ver tema de lectura de datos para creacion de tramas
  getStructurePolicy (policy: String): [GetStructurePolicyOutput] # GSI-3-PK
  getStructureRuc (ruc: String): [GetStructureRucOutput] # GSI-3-PK
  getStructureContractor (contractor: String): [GetStructureContractorOutput] # GSI-3-PK

  # Done
  listProcesses(limit: Int, nextToken: String): AllProcessesOutput
  # getErrores(idProcess: String!): Errores # reporte de errores en el detalle de la estructura
}

schema {
  query: Query
  mutation: Mutation
}