#-------------- CARGA MASIVA ----------------

enum Transaction {
  VENTA
  AFILIACIONES
  PAGOS
}

# save process
input InputCargaDashboard { #cambiar nombre
  # numero de poliza
  policy: String!
  # contratante
  contractor: String!
  # producto
  product: String!
  # canal de venta
  salesChannel: String!
  # transaccion
  transaction: Transaction!
  # periodo de declaracion
  declarationPeriod: String!
  # RUC
  ruc: String
  # id estructura
  structure: String!
}

# # query processes
type AllProcesses {  #Cambiar nombre    DYNAMO: RUC, FECHA DE FINALIZACION E INICIO DE PROCESO PARA CADA ESTADO, cantidad de registros
  idProcess: String! #id del proceso
  # transaccion
  transaction: Transaction!
  # contratante
  contractor: String!
  # numero de poliza
  policy: String!
  # producto   
  product: String! 
  # canalDeVenta
  salesChannel: String!
  # tipo de moneda (1 para soles, 2 para dolares)
  currency: Int!
  # monto de prima
  premium: Float!
  # Cantidad de asegurados
  asegurados: Int!
  # periodo de declaracion
  declarationPeriod: String!
  # fecha y hora de creacion
  creationDate: String!
  # fase actual
  faseActual: String! # fase o estado (trabajar con numeros)
  # objeto fase
  # fase: [Objeto Fase] # objeto fase: numero de fase, cantidad errores, cantidad analizada o exitosa, tiempo (preguntar Gustavox|) 
}


type AllProcessesOutput{
  processes:  [AllProcesses]
  nextToken: String
}


#-------------- CONFIGURACION ----------------
# input DatosGeneralesInput{

#   nombreEstructura: String!
#   transaccion: String!
#   ramo: String!
#   datosCabecera: String!
#   certificadoPorRol: Boolean!
#   filasOrdenadasPorRol: Boolean!
#   formatoArchivo: String!
#   dateFormat: String!
# }

# input Poliza{
#   idStructure: String!
#   nombreStructure: String!
#   producto: String!
#   nPoliza: String!
#   contratante: String!
#   canalVenta: String!
#   vigencia: String!
#   moneda: String!
#   reglas: [Int]!
# }


# input PolizaInput{

#   producto: String!
#   nPoliza: String!
#   contratante: String!
#   canalVenta: String!
#   vigencia: String!
#   moneda: String!
#   reglas: [Int]!
# }

# input AtributosInput{

#   id: String!
#   atributo: String!
#   tipoDato: String!
#   obligatorio: String!
#   valorUnico: String!
#   funcion: [String]!
#   origen: [String]!
#   argumento: [String]!
#   dominio: [String]!
# }

# input NotificacionesInput{

#   id: String!
#   evento: String!
#   aplicacion: String!
#   asunto: String!
#   plantilla: String!
#   fase: String!
# }

# input EntidadInput{

#   atributo: String!
#   origen: String!
#   valor: String!
# }

# input RegistrarInput{
#   cliente: [EntidadInput]!
#   certificado: [EntidadInput]!
#   rol: [EntidadInput]!
#   poliza: [EntidadInput]!
#   credito: [EntidadInput]!
# }

# type Structure {
#   datosGenerales: DatosGenerales!  # cambiar
#   coleccionPolizas: [Poliza]! # Falta crear type
#   lectura: [Atributos]!  # Falta crear type
#   registrar: Registrar!  # Falta crear type
#   notificaciones: [Notificaciones]!  # Falta crear type
#   structureId: String!
# }

# type DatosGenerales {
#   nombreEstructura: String!
#   transaccion: String!
#   ramo: String!
#   datosCabecera: String!
#   certificadoPorRol: String!
#   filasOrdenadasPorRol: String!
#   formatoArchivo: String!
#   creationDate: String
#   changeDate: String
#   state: Boolean!
# }

# input StructureInput {
#   datosGenerales: DatosGeneralesInput!
#   coleccionPolizas: [PolizaInput]!
#   lectura: [AtributosInput]!
#   registrar: RegistrarInput!
#   notificaciones: [NotificacionesInput]!
#   structureId: String #id para hacer un update a una estructura
# }

type Mutation {

  #####################################################
  ####################ESTRUCTURAS######################
  #####################################################
  
  # storeStructure(event: StructureInput!): Boolean #store
  # # validations(validations: InputValidations ): String
  # deleteStructure(structureId:String!):Boolean # falta eliminar una estructura
  # activeStructure(status:Boolean):Boolean # falta activar o desactivar una estructura
  # # cloneStructure(???): Boolean # falta clonar una estructura
  # updateStructure(event: StructureInput!): Boolean #borrar y crear?

  #####################################################
  ###################CARGA MASIVA######################
  #####################################################
  
  # DONE
  storeProcessGetURL(input: InputCargaDashboard, filename: String): String   #Devuelve URL

  
}

type Query{

  #####################################################
  ####################ESTRUCTURAS######################
  #####################################################
  # getStructure(structureId:String!):Structure  # falta obtener una estructura
  # getAllStructures: [Structure]    # listar estructuras posiblemente?

  #####################################################
  ###################CARGA MASIVA######################
  #####################################################
  # getStructureCarga(xRuc:String, xPoliza: String, xContratante: String): Poliza    # falta crear, hablar con gustavo para ver tema de lectura de datos para creacion de tramas
  listProcesses(limit: Int, nextToken: String): AllProcessesOutput
  # getErrores(idProcess: String!): Errores # reporte de errores en el detalle de la estructura
}

schema {
  query: Query
  mutation: Mutation
}